/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mn.boroo.bichih;

import java.awt.Color;
import java.awt.Dialog;
import java.awt.Dimension;
import java.awt.event.KeyEvent;
import java.awt.event.WindowListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.JFrame;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JDialog;
import javax.swing.text.BadLocationException;
import javax.swing.text.StyledDocument;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;

/**
 *
 * @author User
 */
public class jfMain extends javax.swing.JFrame {

    private Timer timer = new Timer();
    private ArrayList<String> wordList = new ArrayList<String>();
    private int currentWordIndex = 0;

    /**
     * Creates new form jfMain
     */
    public jfMain() {
        initComponents();

        setTitle("Бичих Дадлага");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        this.timer.schedule(new TimerTask() {
            @Override
            public void run() {
                LocalDateTime now = LocalDateTime.now();
                // Define a formatter for the date-time value
                DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss");
                // Format the date-time value using the formatter
                String formattedDateTime = now.format(formatter);
                lblTime.setText(formattedDateTime);
            }
        }, 1000, 1000);

        StyledDocument doc = txt1.getStyledDocument();
        Style rStyle = doc.addStyle("rStyle", null);
        StyleConstants.setForeground(rStyle, Color.RED);
        Style bStyle = doc.addStyle("bStyle", null);
        StyleConstants.setForeground(bStyle, Color.BLACK);

        this.reloadTextFile();
    }

    public void reloadTextFile() {
        wordList.clear();

        String filename = "input.txt";
        try ( BufferedReader br = new BufferedReader(new FileReader(filename))) {
            while (br.ready()) {
                String line = br.readLine();
                if (line.length() > 0) {
                    var words = line.split(" ");
                    for (int i = 0; i < words.length; i++) {
                        wordList.add(words[i]);
                    }
                }
            }
        } catch (IOException ex1) {
            try ( BufferedWriter bw = new BufferedWriter(new FileWriter(filename))) {
                bw.write("Line 1");
            } catch (IOException ex2) {
                ex2.printStackTrace();
            }
        }

        currentWordIndex = 0;
        nextText();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lbl1 = new javax.swing.JLabel();
        btnOpen = new javax.swing.JButton();
        lblTime = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt1 = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Бичих Дадлага");
        setPreferredSize(new java.awt.Dimension(600, 300));
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        lbl1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        lbl1.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        lbl1.setText("Өөрөө үлгэр ярих цаг боллоо!");
        lbl1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 6, 1, 6));
        lbl1.setName("lbl1"); // NOI18N

        btnOpen.setText("Текст");
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });

        lblTime.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        lblTime.setText("Time:");

        jScrollPane2.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N

        txt1.setEditable(false);
        txt1.setFont(new java.awt.Font("Courier New", 1, 24)); // NOI18N
        txt1.setText("Өөрөө үлгэр ярих цаг боллоо!");
        txt1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txt1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(txt1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(btnOpen, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                    .addComponent(lbl1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbl1, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 165, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOpen)
                    .addComponent(lblTime))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        // TODO add your handling code here:
        java.awt.EventQueue.invokeLater(() -> {
            var ti = new jfTexts();
            ti.setVisible(true);
            ti.addWindowListener(new java.awt.event.WindowAdapter() {
                @Override
                public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                    reloadTextFile();
                }
            });
        });
    }//GEN-LAST:event_btnOpenActionPerformed

    private void txt1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txt1KeyPressed
        keyTyping(evt.getKeyCode(), evt.getKeyChar());
    }//GEN-LAST:event_txt1KeyPressed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
    }//GEN-LAST:event_formWindowClosed

    void keyTyping(int cod, char chr) {
        switch (cod) {
            case KeyEvent.VK_ENTER: {
                nextText();
            }
            case KeyEvent.VK_BACK_SPACE: {
                backText();
            }
            case KeyEvent.VK_CONTROL:
            case KeyEvent.VK_ALT:
            case KeyEvent.VK_DELETE:
            case KeyEvent.VK_SHIFT:
                break;
            default: {
                checkText(chr);
            }
        }
    }

    void checkText(char chr) {
        var lbl = lbl1.getText();
        var txt = txt1.getText();
        var txtStart = txt.length();
        if (txtStart > lbl.length()) {
            return;
        }
        var txtChr = chr + "";
        var lblChr = lbl.substring(txtStart, txtStart + 1);
        try {
            StyledDocument doc = txt1.getStyledDocument();

            if (lblChr != null && !txtChr.equals(lblChr)) {
                Style rStyle = doc.getStyle("rStyle");
                doc.insertString(txtStart, chr + "", rStyle);
            } else {
                Style bStyle = doc.getStyle("bStyle");
                doc.insertString(doc.getLength(), chr + "", bStyle);
            }
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
        txt1.invalidate();
    }

    void nextText() {
        var txt = "";
        if (wordList.size() <= 0 || wordList.size() <= currentWordIndex) {
            currentWordIndex = 0;
            txt = "<Дахин эхлэх бол Enter>";
        } else {
            while (wordList.size() > currentWordIndex
                    && txt.length() + wordList.get(currentWordIndex).length() < 35) {
                if (txt.length() > 0) {
                    txt += " ";
                }
                txt += wordList.get(currentWordIndex);
                currentWordIndex++;
            }
        }
        lbl1.setText(txt);
        txt1.setText("");
    }

    void backText() {
        StyledDocument doc = txt1.getStyledDocument();
        try {
            if (doc.getLength() > 0) {
                doc.remove(doc.getLength() - 1, 1);
            }
        } catch (BadLocationException ex) {
            ex.printStackTrace();
        }
        txt1.invalidate();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOpen;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbl1;
    private javax.swing.JLabel lblTime;
    private javax.swing.JTextPane txt1;
    // End of variables declaration//GEN-END:variables
}
